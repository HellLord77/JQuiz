/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jquiz;

import jquiz.panels.CreateQuestionPanel;
import jquiz.models.QuizModel;
import jquiz.enums.AnswerEnum;
import jquiz.enums.RoleEnum;
import jquiz.models.QuestionModel;
import jquiz.models.UserModel;
import jquiz.database.Engine;
import jquiz.database.Sorter;
import jquiz.database.columns.SimpleColumn;
import jquiz.database.operators.ComparisonOperator;
import jquiz.database.operators.EmptyOperator;
import jquiz.database.operators.LogicalOperator;
import jquiz.database.operators.Operator;
import jquiz.models.SubmissionModel;
import jquiz.models.AttemptModel;
import jquiz.panels.SubmitQuestionPanel;

/**
 *
 * @author ratul
 */
public class MainFrame extends javax.swing.JFrame {

    private final static com.alexandriasoftware.swing.Validation.Type[] INPUT_VALIDATOR_INVALID_TYPES = {
        com.alexandriasoftware.swing.Validation.Type.UNKNOWN, com.alexandriasoftware.swing.Validation.Type.DANGER};
    private final static SimpleColumn[] SORT_COLUMNS = {SimpleColumn.get("id"),
        SimpleColumn.get("title"), new SimpleColumn("users", "name"), SimpleColumn.get("duration"),
        SimpleColumn.get("pause_duration"), SimpleColumn.get("question_count"), SimpleColumn.get("created_at")};

    private final Engine engine = new Engine();

    private final java.io.File vaultFile;

    private UserModel currentUser;
    private QuizModel currentQuiz;
    private AttemptModel currentAttempt;

    private QuizModel[] currentQuizzes;
    private QuestionModel[] currentQuestions;
    private AnswerEnum[] currentAnswers;
    private Operator currentOperator;
    private Sorter[] currentSorters;

    public MainFrame() {
        this(Const.VAULT_PATH);
    }

    /**
     * Creates new form MainFrame
     *
     * @param vaultPath
     */
    public MainFrame(String vaultPath) {
        initComponents();

        setLocationRelativeTo(null);
        loginPanel.setVisible(true);

        this.vaultFile = new java.io.File(vaultPath);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPanel = new jquiz.panels.LoginPanel(this);
        registerPanel = new jquiz.panels.RegisterPanel(this);
        forgotPasswordPanel = new jquiz.panels.ForgotPasswordPanel(this);
        profilePanel = new jquiz.panels.ProfilePanel(this);
        resetPasswordPanel = new jquiz.panels.ResetPasswordPanel(this);
        createQuizPanel = new jquiz.panels.CreateQuizPanel(this);
        quizListPanel = new jquiz.panels.QuizListPanel(this);
        submitQuizPanel = new jquiz.panels.SubmitQuizPanel(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JQuiz");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.CardLayout());
        getContentPane().add(loginPanel, "loginCard");
        getContentPane().add(registerPanel, "registerCard");
        getContentPane().add(forgotPasswordPanel, "forgotPasswordCard");
        getContentPane().add(profilePanel, "profileCard");
        getContentPane().add(resetPasswordPanel, "resetPasswordCard");
        getContentPane().add(createQuizPanel, "createQuizCard");
        getContentPane().add(quizListPanel, "quizListPanel");
        getContentPane().add(submitQuizPanel, "submitQuizCard");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loginPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        loginPanel.emailTextField.setText("");
        loginPanel.passwordPasswordField.setText("");
        loginPanel.showCheckBox.setSelected(false);

        loginPanel.rememberCheckBox.setSelected(false);
        loginPanelShowCheckBoxActionPerformed(null);
    }

    public void loginPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        if (!engine.userController.exists()) {
            loginPanelRegisterButtonActionPerformed(null);
            return;
        }

        String email = loginPanel.emailTextField.getText().strip();
        String password = String.valueOf(loginPanel.passwordPasswordField.getPassword()).strip();

        if (email.isEmpty() && password.isEmpty() && vaultFile.canRead()) {
            try (java.io.BufferedReader bufferedReader = new java.io.BufferedReader(new java.io.FileReader(vaultFile))) {
                String emailVault = bufferedReader.readLine();
                String passwordValut = bufferedReader.readLine();

                loginPanel.emailTextField.setText(emailVault);
                loginPanel.passwordPasswordField.setText(passwordValut);
                loginPanel.rememberCheckBox.setSelected(true);
            } catch (java.io.IOException exception) {
                System.err.println(exception);
            }
        }

        loginPanelRegisterButtonDocumentUpdate(null);

        loginPanel.emailTextFieldValidator.verify(loginPanel.emailTextField);
        loginPanel.passwordPasswordFieldValidator.verify(loginPanel.passwordPasswordField);
    }

    public void loginPanelShowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (loginPanel.showCheckBox.isSelected()) {
            loginPanel.passwordPasswordField.setEchoChar((char) 0);
        } else {
            loginPanel.passwordPasswordField.setEchoChar('â€¢');
        }
    }

    public void loginPanelLoginButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String email = loginPanel.emailTextField.getText().strip();
        String password = String.copyValueOf(loginPanel.passwordPasswordField.getPassword()).strip();

        currentUser = engine.userController.read(email, password);
        if (currentUser == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "E-mail address and/or password is invalid",
                    "Invalid login", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Logged in successfully",
                "Succeeded login", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        if (loginPanel.rememberCheckBox.isSelected()) {
            try {
                if (!vaultFile.exists()) {
                    vaultFile.createNewFile();
                }
                try (java.io.BufferedWriter bufferedWriter = new java.io.BufferedWriter(new java.io.FileWriter(vaultFile))) {
                    bufferedWriter.write(email);
                    bufferedWriter.write('\n');
                    bufferedWriter.write(password);
                    bufferedWriter.write('\n');
                }
            } catch (java.io.IOException exception) {
                System.err.println(exception);
            }
        } else {
            vaultFile.delete();
        }

        loginPanel.setVisible(false);
        profilePanel.setVisible(true);
    }

    public void loginPanelRegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {
        loginPanel.setVisible(false);
        registerPanel.setVisible(true);
    }

    public void loginPanelForgotPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        loginPanel.setVisible(false);
        forgotPasswordPanel.setVisible(true);
    }

    public com.alexandriasoftware.swing.Validation loginPanelEmailTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String email = loginPanel.emailTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (email.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty e-mail address";
        } else if (!Validator.isValidEmail(email)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Invalid e-mail address";
        } else if (!engine.userController.exists(email)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Email not registered";
        }

        javax.swing.SwingUtilities.invokeLater(() -> loginPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation loginPanelPasswordPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(loginPanel.passwordPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (password.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (password.length() < Const.MIN_PASSWORD_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Password must contain at least %d characters".formatted(Const.MIN_PASSWORD_LENGTH);
        }

        javax.swing.SwingUtilities.invokeLater(() -> loginPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public void loginPanelRegisterButtonDocumentUpdate(javax.swing.event.DocumentEvent evt) {
        loginPanel.loginButton.setEnabled(false);
    }

    private void loginPanelRegisterButtonDocumentDebouncedUpdate() {
        com.alexandriasoftware.swing.Validation.Type[] types = {
            loginPanel.emailTextFieldValidator.getValidation().getType(),
            loginPanel.passwordPasswordFieldValidator.getValidation().getType()};

        loginPanel.loginButton.setEnabled(!Util.any(types, INPUT_VALIDATOR_INVALID_TYPES));
    }

    public void registerPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        registerPanel.nameTextField.setText("");
        registerPanel.emailTextField.setText("");
        registerPanel.passwordPasswordField.setText("");
        registerPanel.passwordConfirmPasswordField.setText("");

        registerPanel.showCheckBox.setSelected(false);
        registerPanelShowCheckBoxActionPerformed(null);
    }

    public void registerPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        registerPanelRegisterButtonDocumentUpdate(null);

        registerPanel.nameTextFieldValidator.verify(registerPanel.nameTextField);
        registerPanel.emailTextFieldValidator.verify(registerPanel.emailTextField);
        registerPanel.passwordPasswordFieldValidator.verify(registerPanel.passwordPasswordField);
        registerPanel.passwordConfirmPasswordFieldValidator.verify(registerPanel.passwordConfirmPasswordField);
    }

    public void registerPanelShowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (registerPanel.showCheckBox.isSelected()) {
            registerPanel.passwordPasswordField.setEchoChar((char) 0);
            registerPanel.passwordConfirmPasswordField.setEchoChar((char) 0);
        } else {
            registerPanel.passwordPasswordField.setEchoChar('â€¢');
            registerPanel.passwordConfirmPasswordField.setEchoChar('â€¢');
        }
    }

    public void registerPanelRegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String name = registerPanel.nameTextField.getText().strip();
        String email = registerPanel.emailTextField.getText().strip();
        String password = String.copyValueOf(registerPanel.passwordPasswordField.getPassword()).strip();

        RoleEnum role = engine.userController.exists() ? RoleEnum.QUIZZEE : RoleEnum.ADMIN;
        currentUser = engine.userController.create(role, name, email, password);
        if (currentUser == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Username and/or e-mail address and/or password is invalid",
                    "Invalid register", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Registered successfully",
                "Succeeded register", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        registerPanel.setVisible(false);
        profilePanel.setVisible(true);
    }

    public void registerPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        registerPanel.setVisible(false);
        loginPanel.setVisible(true);
    }

    public com.alexandriasoftware.swing.Validation registerPanelNameTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String name = registerPanel.nameTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "Username is available";

        if (name.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty username";
        } else if (name.length() < Const.MIN_NAME_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username must contain at least %d characters".formatted(Const.MIN_NAME_LENGTH);
        } else if (!Validator.isValidName(Character.toString(name.charAt(0)))) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username must start with a letter";
        } else if (!Validator.isValidName(name)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username can only contain letter(s), digit(s) or underscore(s)";
        } else if (engine.userController.existsName(name)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username already registered";
        }

        javax.swing.SwingUtilities.invokeLater(() -> registerPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation registerPanelEmailTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String email = registerPanel.emailTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "E-mail address is available";

        if (email.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty e-mail address";
        } else if (!Validator.isValidEmail(email)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Invalid e-mail address";
        } else if (engine.userController.exists(email)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "E-mail address already registered";
        }

        javax.swing.SwingUtilities.invokeLater(() -> registerPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation registerPanelPasswordPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(registerPanel.passwordPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "";

        if (password.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (password.length() < Const.MIN_PASSWORD_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Password must contain at least %d characters".formatted(Const.MIN_PASSWORD_LENGTH);
        } else if (!Validator.hasLowerCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any lower case letter";
        } else if (!Validator.hasUpperCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any upper case letter";
        } else if (!Validator.hasDigit(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any digit";
        } else if (!Validator.hasSymbol(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any symbol";
        }

        javax.swing.SwingUtilities.invokeLater(() -> registerPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation registerPanelPasswordConfirmPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(registerPanel.passwordPasswordField.getPassword()).strip();
        String passwordConfirm = String.copyValueOf(registerPanel.passwordConfirmPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "";

        if (passwordConfirm.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (!password.equals(passwordConfirm)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Passwords do not match";
        }

        javax.swing.SwingUtilities.invokeLater(() -> registerPanelRegisterButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public void registerPanelRegisterButtonDocumentUpdate(javax.swing.event.DocumentEvent evt) {
        registerPanel.registerButton.setEnabled(false);
    }

    private void registerPanelRegisterButtonDocumentDebouncedUpdate() {
        com.alexandriasoftware.swing.Validation.Type[] types = {
            registerPanel.nameTextFieldValidator.getValidation().getType(),
            registerPanel.emailTextFieldValidator.getValidation().getType(),
            registerPanel.passwordPasswordFieldValidator.getValidation().getType(),
            registerPanel.passwordConfirmPasswordFieldValidator.getValidation().getType()};

        registerPanel.registerButton.setEnabled(!Util.any(types, INPUT_VALIDATOR_INVALID_TYPES));
    }

    public void forgotPasswordPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        forgotPasswordPanel.nameTextField.setText("");
        forgotPasswordPanel.emailTextField.setText("");
        forgotPasswordPanel.passwordPasswordField.setText("");
        forgotPasswordPanel.passwordConfirmPasswordField.setText("");

        forgotPasswordPanel.showCheckBox.setSelected(false);
        forgotPasswordPanelShowCheckBoxActionPerformed(null);
    }

    public void forgotPasswordPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        forgotPasswordPanelResetButtonDocumentUpdate(null);

        forgotPasswordPanel.nameTextFieldValidator.verify(forgotPasswordPanel.nameTextField);
        forgotPasswordPanel.emailTextFieldValidator.verify(forgotPasswordPanel.emailTextField);
        forgotPasswordPanel.passwordPasswordFieldValidator.verify(forgotPasswordPanel.passwordPasswordField);
        forgotPasswordPanel.passwordConfirmPasswordFieldValidator.verify(forgotPasswordPanel.passwordConfirmPasswordField);
    }

    public void forgotPasswordPanelResetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String name = forgotPasswordPanel.nameTextField.getText();
        String email = forgotPasswordPanel.emailTextField.getText();
        String password = String.copyValueOf(forgotPasswordPanel.passwordPasswordField.getPassword()).strip();

        UserModel user = engine.userController.readName(name, email);
        if (user == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Username and/or e-mail address is invalid",
                    "Invalid reset", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        user = engine.userController.update(user, password);
        if (user == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                    "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Reset password successfully",
                "Succeeded reset", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        forgotPasswordPanel.setVisible(false);
        loginPanel.setVisible(true);
    }

    public void forgotPasswordPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        forgotPasswordPanel.setVisible(false);
        loginPanel.setVisible(true);
    }

    public com.alexandriasoftware.swing.Validation forgotPasswordPanelNameTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String name = forgotPasswordPanel.nameTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (name.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty username";
        } else if (name.length() < Const.MIN_NAME_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username must contain at least %d characters".formatted(Const.MIN_NAME_LENGTH);
        } else if (!Validator.isValidName(Character.toString(name.charAt(0)))) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username must start with a letter";
        } else if (!Validator.isValidName(name)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username can only contain letter(s), digit(s) or underscore(s)";
        } else if (!engine.userController.existsName(name)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Username not registered";
        }

        javax.swing.SwingUtilities.invokeLater(() -> forgotPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation forgotPasswordPanelEmailTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String email = forgotPasswordPanel.emailTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (email.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty email";
        } else if (!Validator.isValidEmail(email)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Invalid email";
        }

        javax.swing.SwingUtilities.invokeLater(() -> forgotPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation forgotPasswordPanelPasswordPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(forgotPasswordPanel.passwordPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (password.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (password.length() < Const.MIN_PASSWORD_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Password must contain at least %d characters".formatted(Const.MIN_PASSWORD_LENGTH);
        } else if (!Validator.hasLowerCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any lower case letter";
        } else if (!Validator.hasUpperCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any upper case letter";
        } else if (!Validator.hasDigit(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any digit";
        } else if (!Validator.hasSymbol(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any symbol";
        }

        javax.swing.SwingUtilities.invokeLater(() -> forgotPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation forgotPasswordPanelPasswordConfirmPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(forgotPasswordPanel.passwordPasswordField.getPassword()).strip();
        String passwordConfirm = String.copyValueOf(forgotPasswordPanel.passwordConfirmPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "";

        if (passwordConfirm.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (!password.equals(passwordConfirm)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Passwords do not match";
        }

        javax.swing.SwingUtilities.invokeLater(() -> forgotPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public void forgotPasswordPanelResetButtonDocumentUpdate(javax.swing.event.DocumentEvent evt) {
        forgotPasswordPanel.resetButton.setEnabled(false);
    }

    private void forgotPasswordPanelResetButtonDocumentDebouncedUpdate() {
        com.alexandriasoftware.swing.Validation.Type[] types = {
            forgotPasswordPanel.nameTextFieldValidator.getValidation().getType(),
            forgotPasswordPanel.emailTextFieldValidator.getValidation().getType(),
            forgotPasswordPanel.passwordPasswordFieldValidator.getValidation().getType(),
            forgotPasswordPanel.passwordConfirmPasswordFieldValidator.getValidation().getType()};

        forgotPasswordPanel.resetButton.setEnabled(!Util.any(types, INPUT_VALIDATOR_INVALID_TYPES));
    }

    public void forgotPasswordPanelShowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (forgotPasswordPanel.showCheckBox.isSelected()) {
            forgotPasswordPanel.passwordPasswordField.setEchoChar((char) 0);
            forgotPasswordPanel.passwordConfirmPasswordField.setEchoChar((char) 0);
        } else {
            forgotPasswordPanel.passwordPasswordField.setEchoChar('â€¢');
            forgotPasswordPanel.passwordConfirmPasswordField.setEchoChar('â€¢');
        }
    }

    public void profilePanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        String name = currentUser.name();
        String email = currentUser.email();
        String quizzes = String.valueOf(engine.quizController.count(currentUser));

        profilePanel.nameLabel.setText(name);
        profilePanel.emailValueLabel.setText(email);
        profilePanel.quizzesValueLabel.setText(quizzes);

        profilePanel.createQuizButton.setEnabled(currentUser.role() != RoleEnum.QUIZZEE);
    }

    public void profilePanelLogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        profilePanel.setVisible(false);
        loginPanel.setVisible(true);
    }

    public void profilePanelResetPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {
        profilePanel.setVisible(false);
        resetPasswordPanel.setVisible(true);
    }

    public void profilePanelCreateQuizButtonActionPerformed(java.awt.event.ActionEvent evt) {
        profilePanel.setVisible(false);
        createQuizPanel.setVisible(true);
    }

    public void profilePanelQuizListButtonActionPerformed(java.awt.event.ActionEvent evt) {
        profilePanel.setVisible(false);
        quizListPanel.setVisible(true);
    }

    public void resetPasswordPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        resetPasswordPanel.currentPasswordPasswordField.setText("");
        resetPasswordPanel.passwordPasswordField.setText("");
        resetPasswordPanel.passwordConfirmPasswordField.setText("");

        resetPasswordPanel.showCheckBox.setSelected(false);
        resetPasswordPanelShowCheckBoxActionPerformed(null);
    }

    public void resetPasswordPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        resetPasswordPanelResetButtonDocumentUpdate(null);

        resetPasswordPanel.currentPasswordPasswordFieldValidator.verify(resetPasswordPanel.currentPasswordPasswordField);
        resetPasswordPanel.passwordPasswordFieldValidator.verify(resetPasswordPanel.passwordPasswordField);
        resetPasswordPanel.passwordConfirmPasswordFieldValidator.verify(resetPasswordPanel.passwordConfirmPasswordField);
    }

    public void resetPasswordPanelShowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        if (resetPasswordPanel.showCheckBox.isSelected()) {
            resetPasswordPanel.currentPasswordPasswordField.setEchoChar((char) 0);
            resetPasswordPanel.passwordPasswordField.setEchoChar((char) 0);
            resetPasswordPanel.passwordConfirmPasswordField.setEchoChar((char) 0);
        } else {
            resetPasswordPanel.currentPasswordPasswordField.setEchoChar('â€¢');
            resetPasswordPanel.passwordPasswordField.setEchoChar('â€¢');
            resetPasswordPanel.passwordConfirmPasswordField.setEchoChar('â€¢');
        }
    }

    public void resetPasswordPanelResetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String currentPassword = String.copyValueOf(resetPasswordPanel.currentPasswordPasswordField.getPassword()).strip();
        String password = String.copyValueOf(resetPasswordPanel.passwordPasswordField.getPassword()).strip();

        UserModel user = engine.userController.read(currentUser.email(), currentPassword);
        if (user == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Password is invalid",
                    "Invalid reset", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        user = engine.userController.update(user, password);
        if (user == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                    "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Reset password successfully",
                "Succeeded reset", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        resetPasswordPanel.setVisible(false);
        loginPanel.setVisible(true);
    }

    public void resetPasswordPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        resetPasswordPanel.setVisible(false);
        profilePanel.setVisible(true);
    }

    public com.alexandriasoftware.swing.Validation resetPasswordPanelCurrentPasswordPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(resetPasswordPanel.currentPasswordPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (password.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (password.length() < Const.MIN_PASSWORD_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Password must contain at least %d characters".formatted(Const.MIN_PASSWORD_LENGTH);
        }

        javax.swing.SwingUtilities.invokeLater(() -> resetPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation resetPasswordPanelPasswordPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(resetPasswordPanel.currentPasswordPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "";

        if (password.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (password.length() < Const.MIN_PASSWORD_LENGTH) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Password must contain at least %d characters".formatted(Const.MIN_PASSWORD_LENGTH);
        } else if (!Validator.hasLowerCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any lower case letter";
        } else if (!Validator.hasUpperCase(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any upper case letter";
        } else if (!Validator.hasDigit(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any digit";
        } else if (!Validator.hasSymbol(password)) {
            type = com.alexandriasoftware.swing.Validation.Type.WARNING;
            message = "Password do not contain any symbol";
        }

        javax.swing.SwingUtilities.invokeLater(() -> resetPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public com.alexandriasoftware.swing.Validation resetPasswordPanelPasswordConfirmPasswordFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String password = String.copyValueOf(resetPasswordPanel.passwordPasswordField.getPassword()).strip();
        String passwordConfirm = String.copyValueOf(resetPasswordPanel.passwordConfirmPasswordField.getPassword()).strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.SUCCESS;
        String message = "";

        if (passwordConfirm.isEmpty()) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Empty password";
        } else if (!password.equals(passwordConfirm)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "Passwords do not match";
        }

        javax.swing.SwingUtilities.invokeLater(() -> resetPasswordPanelResetButtonDocumentDebouncedUpdate());

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public void resetPasswordPanelResetButtonDocumentUpdate(javax.swing.event.DocumentEvent evt) {
        resetPasswordPanel.resetButton.setEnabled(false);
    }

    private void resetPasswordPanelResetButtonDocumentDebouncedUpdate() {
        com.alexandriasoftware.swing.Validation.Type[] types = {
            resetPasswordPanel.currentPasswordPasswordFieldValidator.getValidation().getType(),
            resetPasswordPanel.passwordPasswordFieldValidator.getValidation().getType(),
            resetPasswordPanel.passwordConfirmPasswordFieldValidator.getValidation().getType()};

        resetPasswordPanel.resetButton.setEnabled(!Util.any(types, INPUT_VALIDATOR_INVALID_TYPES));
    }

    public void createQuizPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        createQuizPanel.titleTextField.setText("");
        createQuizPanel.descriptionTextArea.setText("");
        createQuizPanel.durationTimePicker.setTime(Const.DEFAULT_DURATION);
        createQuizPanel.pauseDurationTimePicker.setTime(Const.DEFAULT_PAUSE_DURATION);

        createQuizPanel.questionsPanel.removeAll();
        createQuizPanelAddButtonActionPerformed(null);
    }

    public void createQuizPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        createQuizPanel.actionConfirmPanel.setVisible(false);
        createQuizPanel.actionCreatePanel.setVisible(true);
    }

    public void createQuizPanelActionCreatePanelComponentShown(java.awt.event.ComponentEvent evt) {
        createQuizPanel.titleTextField.setEnabled(true);
        createQuizPanel.descriptionTextArea.setEnabled(true);
        createQuizPanel.durationTimePicker.setEnabled(true);
        createQuizPanel.pauseDurationTimePicker.setEnabled(true);
        Util.setEnabled(createQuizPanel.questionsPanel, true);
    }

    public void createQuizPanelAddButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int questionsCount = createQuizPanel.questionsPanel.getComponentCount();

        if (questionsCount == Const.MAX_QUESTION_PER_QUIZ) {
            return;
        }

        if (questionsCount != 0) {
            java.awt.Component component = createQuizPanel.questionsPanel.getComponent(questionsCount - 1);
            CreateQuestionPanel lastCreateQuestionPanel = (CreateQuestionPanel) component;
            boolean[] lastCreateQuestionPanelComponentsInvalid = lastCreateQuestionPanel.componentsAreInvalid();

            if (Util.all(lastCreateQuestionPanelComponentsInvalid)) {
                return;
            }
        }

        CreateQuestionPanel createQuestionPanel = new CreateQuestionPanel();
        createQuizPanel.questionsPanel.add(createQuestionPanel);

        String nLabel = "%03d.".formatted(questionsCount + 1);
        createQuestionPanel.nLabel.setText(nLabel);

        revalidate();
        repaint();

        javax.swing.JScrollBar questionsVerticalScrollBar = createQuizPanel.questionsScrollPane.getVerticalScrollBar();
        questionsVerticalScrollBar.setValue(questionsVerticalScrollBar.getMaximum());
    }

    public void createQuizPanelRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int questionsCount = createQuizPanel.questionsPanel.getComponentCount();
        createQuizPanel.questionsPanel.remove(questionsCount - 1);

        if (questionsCount == 1) {
            createQuizPanelAddButtonActionPerformed(null);
        } else {
            revalidate();
            repaint();
        }
    }

    public void createQuizPanelCreateButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String title = createQuizPanel.titleTextField.getText().strip();
        String description = createQuizPanel.descriptionTextArea.getText().strip();

        if (title.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Title is empty",
                    "Empty title", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (description.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Description is empty",
                    "Empty description", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        boolean isCreateQuestionPanelComponentsInvalid = false;

        for (java.awt.Component component : createQuizPanel.questionsPanel.getComponents()) {
            CreateQuestionPanel createQuestionPanel = (CreateQuestionPanel) component;

            boolean[] createQuestionPanelComponentsInvalid = createQuestionPanel.componentsAreInvalid();
            createQuestionPanelComponentsInvalid[1] = false;

            java.awt.Color borderColor = java.awt.Color.GRAY;

            if (Util.any(createQuestionPanelComponentsInvalid)) {
                isCreateQuestionPanelComponentsInvalid = true;
                borderColor = java.awt.Color.YELLOW;
            }

            javax.swing.border.LineBorder border = new javax.swing.border.LineBorder(borderColor, 1, true);
            createQuestionPanel.setBorder(border);
        }

        if (isCreateQuestionPanelComponentsInvalid) {
            javax.swing.JOptionPane.showMessageDialog(this, "One or more of the question is invalid",
                    "Invalid question(s)", javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }

        createQuizPanel.actionCreatePanel.setVisible(false);
        createQuizPanel.actionConfirmPanel.setVisible(true);
    }

    public void createQuizPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createQuizPanel.setVisible(false);
        profilePanel.setVisible(true);
    }

    public void createQuizPanelActionConfirmPanelComponentShown(java.awt.event.ComponentEvent evt) {
        createQuizPanel.titleTextField.setEnabled(false);
        createQuizPanel.descriptionTextArea.setEnabled(false);
        createQuizPanel.durationTimePicker.setEnabled(false);
        createQuizPanel.pauseDurationTimePicker.setEnabled(false);
        Util.setEnabled(createQuizPanel.questionsPanel, false);
    }

    public void createQuizPanelCreateConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String title = createQuizPanel.titleTextField.getText().strip();
        String description = createQuizPanel.descriptionTextArea.getText().strip();
        java.sql.Time duration = java.sql.Time.valueOf(createQuizPanel.durationTimePicker.getTime());
        java.sql.Time pauseDuration = java.sql.Time.valueOf(createQuizPanel.pauseDurationTimePicker.getTime());
        int questionCount = createQuizPanel.questionsPanel.getComponentCount();

        QuizModel quiz = engine.quizController.create(currentUser, title, description, duration, pauseDuration, questionCount);
        if (quiz == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                    "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        for (java.awt.Component component : createQuizPanel.questionsPanel.getComponents()) {
            CreateQuestionPanel createQuestionConfirmPanel = (CreateQuestionPanel) component;

            String text = createQuestionConfirmPanel.textTextField.getText().strip();
            String hint = createQuestionConfirmPanel.hintTextArea.getText().strip();
            String option0 = createQuestionConfirmPanel.option0TextField.getText().strip();
            String option1 = createQuestionConfirmPanel.option1TextField.getText().strip();
            String option2 = createQuestionConfirmPanel.option2TextField.getText().strip();
            String option3 = createQuestionConfirmPanel.option3TextField.getText().strip();
            AnswerEnum answer = AnswerEnum.values()[Integer.parseInt(
                    createQuestionConfirmPanel.optionsButtonGroup.getSelection().getActionCommand())];

            QuestionModel question = engine.questionController.create(quiz,
                    text, hint, option0, option1, option2, option3, answer);
            if (question == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                        "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        javax.swing.JOptionPane.showMessageDialog(this, "Created quiz successfully",
                "Succeded creation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        createQuizPanel.setVisible(false);
        quizListPanel.setVisible(true);
    }

    public void createQuizPanelCreateBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createQuizPanelFormComponentShown(null);
    }

    public void quizListPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        quizListPanel.idTextField.setText("");
        quizListPanel.titleTextField.setText("");
        quizListPanel.quizerTextField.setText("");

        currentOperator = EmptyOperator.get();

        javax.swing.RowSorter.SortKey sortKey = new javax.swing.RowSorter.SortKey(6, javax.swing.SortOrder.DESCENDING);
        quizListPanel.quizzesTableRowSorter.setSortKeys(java.util.List.of(sortKey));

        javax.swing.SpinnerNumberModel spinnerModel = (javax.swing.SpinnerNumberModel) quizListPanel.pageSpinner.getModel();
        spinnerModel.setValue(1);

        quizListPanelPageSpinnerStateChanged(null);
    }

    public void quizListPanelPreviousButtonActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.SpinnerNumberModel spinnerModel = (javax.swing.SpinnerNumberModel) quizListPanel.pageSpinner.getModel();
        long page = spinnerModel.getNumber().longValue();
        spinnerModel.setValue(page - 1);

        quizListPanelPageSpinnerStateChanged(null);
    }

    public void quizListPanelPageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        javax.swing.SpinnerNumberModel spinnerModel = (javax.swing.SpinnerNumberModel) quizListPanel.pageSpinner.getModel();

        long page = spinnerModel.getNumber().longValue();
        long maxPage = engine.quizController.countPage(currentOperator);

        java.util.List<QuizModel> quizzes = engine.quizController.filterPage(currentOperator, currentSorters, page);

        javax.swing.table.DefaultTableModel tableModel = (javax.swing.table.DefaultTableModel) quizListPanel.quizzesTable.getModel();
        tableModel.setRowCount(0);

        currentQuizzes = new QuizModel[quizzes.size()];

        for (int index = 0; index < quizzes.size(); ++index) {
            QuizModel quiz = quizzes.get(index);

            int id = quiz.id();
            String name = quiz.title();
            String quizer = quiz.user().name();
            java.time.LocalTime duration = quiz.duration().toLocalTime();
            java.time.LocalTime pasueDuration = quiz.pauseDuration().toLocalTime();
            long questionCount = quiz.questionCount();
            String createdAt = Const.DEFAULT_DATE_FORMAT.format(quiz.createdAt());
            boolean attempted = engine.attemptController.exists(currentUser, quiz);
            boolean submitted = engine.submissionController.exists(currentUser, quiz);

            tableModel.addRow(new Object[]{id, name, quizer, duration,
                pasueDuration, questionCount, createdAt, attempted, submitted});

            currentQuizzes[index] = quiz;
        }

        spinnerModel.setMaximum(maxPage);
        quizListPanel.pageSpinner.setEnabled(maxPage != 0);

        quizListPanel.previousButton.setEnabled(page > 1);
        quizListPanel.nextButton.setEnabled(page < maxPage);
    }

    public void quizListPanelNextButtonActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.SpinnerNumberModel spinnerModel = (javax.swing.SpinnerNumberModel) quizListPanel.pageSpinner.getModel();
        long page = spinnerModel.getNumber().longValue();
        spinnerModel.setValue(page + 1);

        quizListPanelPageSpinnerStateChanged(null);
    }

    public void quizListPanelStartButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int row = quizListPanel.quizzesTable.getSelectedRow();

        if (row == -1) {
            return;
        }

        currentQuiz = currentQuizzes[row];

        quizListPanel.setVisible(false);
        submitQuizPanel.setVisible(true);
    }

    public void quizListPanelRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
        quizListPanelPageSpinnerStateChanged(null);
    }

    public void quizListPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        quizListPanel.setVisible(false);
        profilePanel.setVisible(true);
    }

    public com.alexandriasoftware.swing.Validation quizListPanelIdTextFieldGetDebouncedValidation(
            javax.swing.JComponent input, com.alexandriasoftware.swing.JInputValidatorPreferences preferences) {
        String id = quizListPanel.idTextField.getText().strip();

        com.alexandriasoftware.swing.Validation.Type type = com.alexandriasoftware.swing.Validation.Type.NONE;
        String message = "";

        if (!Validator.onlyDigit(id)) {
            type = com.alexandriasoftware.swing.Validation.Type.DANGER;
            message = "ID can only contain digit(s)";
        }

        return new com.alexandriasoftware.swing.Validation(type, message);
    }

    public void quizListPanelQuizzesTableDocumentUpdate(javax.swing.event.DocumentEvent evt) {
        String id = quizListPanel.idTextField.getText().strip();
        String title = quizListPanel.titleTextField.getText().strip();
        String quizer = quizListPanel.quizerTextField.getText().strip();

        java.util.ArrayList<ComparisonOperator> comparisonOperators = new java.util.ArrayList<>();

        if (!id.isEmpty() && Validator.onlyDigit(id)) {
            comparisonOperators.add(ComparisonOperator.eq("id", Integer.valueOf(id)));
        }

        if (!title.isEmpty()) {
            comparisonOperators.add(ComparisonOperator.like("title", "%%%s%%".formatted(title)));
        }

        if (!quizer.isEmpty()) {
            comparisonOperators.add(ComparisonOperator.like(new SimpleColumn("users", "name"), "%%%s%%".formatted(quizer)));
        }

        Operator[] operators = new Operator[comparisonOperators.size()];
        currentOperator = LogicalOperator.get(comparisonOperators.toArray(operators));

        quizListPanelPageSpinnerStateChanged(null);
    }

    public void quizListPanelQuizzesTableRowSorterUpdated(javax.swing.event.RowSorterEvent evt) {
        if (evt.getType() == javax.swing.event.RowSorterEvent.Type.SORT_ORDER_CHANGED) {
            java.util.ArrayList<Sorter> sorters = new java.util.ArrayList<>();

            for (javax.swing.RowSorter.SortKey sortKey : quizListPanel.quizzesTableRowSorter.getSortKeys()) {
                int columnIndex = sortKey.getColumn();
                SimpleColumn column = SORT_COLUMNS[columnIndex];

                boolean isAscending = sortKey.getSortOrder() == javax.swing.SortOrder.ASCENDING;
                Sorter sorter = isAscending ? Sorter.asc(column) : Sorter.desc(column);
                sorters.add(sorter);

                break;  // TODO multi sort invisible in ui
            }

            currentSorters = new Sorter[sorters.size()];
            sorters.toArray(currentSorters);

            quizListPanelPageSpinnerStateChanged(null);
        }
    }

    public void submitQuizPanelFormComponentHidden(java.awt.event.ComponentEvent evt) {
        submitQuizPanel.questionsPanel.removeAll();

        submitQuizPanel.pauseDurationCountDown.stop();
        submitQuizPanel.durationCountDown.stop();
    }

    public void submitQuizPanelFormComponentShown(java.awt.event.ComponentEvent evt) {
        boolean attempted = engine.attemptController.exists(currentUser, currentQuiz);

        currentAttempt = engine.attemptController.create(currentUser, currentQuiz);
        if (currentAttempt == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                    "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String title = currentQuiz.title();
        String quizer = currentQuiz.user().name();
        java.time.LocalTime duration = currentQuiz.duration().toLocalTime();
        java.time.LocalTime pauseDuration = currentQuiz.pauseDuration().toLocalTime();

        submitQuizPanel.titleValueLabel.setText(title);
        submitQuizPanel.quizerValueLabel.setText(quizer);

        submitQuizPanel.pauseDurationCountDown.setDuration(pauseDuration.toSecondOfDay() * 1000);
        submitQuizPanel.durationCountDown.setDuration(duration.toSecondOfDay() * 1000);

        java.util.ArrayList<QuestionModel> questions = new java.util.ArrayList<>(
                engine.questionController.filter(currentQuiz));

        currentQuestions = new QuestionModel[questions.size()];
        currentAnswers = new AnswerEnum[questions.size()];

        if (Const.SHUFFLE_QUIZ_QUESTIONS) {  // TODO seed
            java.util.Collections.shuffle(questions);
        }

        for (int index = 0; index < questions.size(); ++index) {
            QuestionModel question = questions.get(index);

            String nLabel = "%03d.".formatted(index + 1);
            String text = question.text();
            String hint = question.hint();
            String option0 = question.option0();
            String option1 = question.option1();
            String option2 = question.option2();
            String option3 = question.option3();
            AnswerEnum answer = question.answer();

            java.util.ArrayList<String> options = new java.util.ArrayList<>(
                    java.util.List.of(option0, option1, option2, option3));

            if (Const.SHUFFLE_QUESTION_OPTIONS) {
                String optionText = options.get(answer.ordinal());
                java.util.Collections.shuffle(options);
                answer = AnswerEnum.values()[options.indexOf(optionText)];
            }

            SubmitQuestionPanel submitQuestionPanel = new SubmitQuestionPanel();

            submitQuestionPanel.nLabel.setText(nLabel);
            submitQuestionPanel.textLabel.setText(text);
            submitQuestionPanel.hintButton.setToolTipText(hint);
            javax.swing.JRadioButton[] optionRadioButtons = {
                submitQuestionPanel.option0RadioButton, submitQuestionPanel.option1RadioButton,
                submitQuestionPanel.option2RadioButton, submitQuestionPanel.option3RadioButton};
            for (int indexButton = 0; indexButton < optionRadioButtons.length; ++indexButton) {
                optionRadioButtons[indexButton].setText(options.get(indexButton));  // TODO zip
            }

            submitQuizPanel.questionsPanel.add(submitQuestionPanel);

            currentQuestions[index] = question;
            currentAnswers[index] = answer;
        }

        revalidate();
        repaint();

        submitQuizPanel.pauseToggleButton.setEnabled(pauseDuration.toSecondOfDay() != 0);
        submitQuizPanel.backConfirmButton.setEnabled(true);

        submitQuizPanel.pauseToggleButton.setSelected(false);
        submitQuizPanelPauseToggleButtonActionPerformed(null);

        submitQuizPanelBackConfirmButtonActionPerformed(null);
        submitQuizPanel.backButton.setEnabled(attempted);

        submitQuizPanel.pauseDurationCountDown.start();
        submitQuizPanel.pauseDurationCountDown.setPaused(true);

        submitQuizPanel.durationCountDown.start();
    }

    public void submitQuizPanelPauseToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {
        boolean paused = submitQuizPanel.pauseToggleButton.isSelected();

        submitQuizPanel.questionsScrollPane.setVisible(!paused);
        submitQuizPanel.pausedPanel.setVisible(paused);

        submitQuizPanel.pauseToggleButton.setText(paused ? "Resume" : "Pause");

        submitQuizPanel.pauseDurationCountDown.setPaused(!paused);
        submitQuizPanel.durationCountDown.setPaused(paused);
    }

    public void submitQuizPanelActionSubmitPanelComponentShown(java.awt.event.ComponentEvent evt) {
        Util.setEnabled(submitQuizPanel.questionsPanel, true);
    }

    public void submitQuizPanelSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.actionSubmitPanel.setVisible(false);
        submitQuizPanel.actionConfirmPanel.setVisible(true);
    }

    public void submitQuizPanelBackButtonActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.setVisible(false);
        quizListPanel.setVisible(true);
    }

    public void submitQuizPanelActionConfirmPanelComponentShown(java.awt.event.ComponentEvent evt) {
        Util.setEnabled(submitQuizPanel.questionsPanel, false);

        for (java.awt.Component component : submitQuizPanel.questionsPanel.getComponents()) {
            SubmitQuestionPanel submitQuestionPanel = (SubmitQuestionPanel) component;
            java.awt.Color borderColor;
            if (submitQuestionPanel.optionsButtonGroup.getSelection() == null) {
                borderColor = java.awt.Color.YELLOW;
            } else {
                borderColor = java.awt.Color.GRAY;
            }
            javax.swing.border.LineBorder border = new javax.swing.border.LineBorder(borderColor, 1, true);
            submitQuestionPanel.setBorder(border);
        }
    }

    public void submitQuizPanelSubmitConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.pauseDurationCountDown.stop();
        submitQuizPanel.durationCountDown.stop();

        int answerCount = 0;
        for (java.awt.Component component : submitQuizPanel.questionsPanel.getComponents()) {
            SubmitQuestionPanel submitQuestionPanel = (SubmitQuestionPanel) component;
            if (submitQuestionPanel.optionsButtonGroup.getSelection() != null) {
                ++answerCount;
            }
        }

        SubmissionModel submission = engine.submissionController.create(currentAttempt, answerCount);
        if (submission == null) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                    "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        java.awt.Component[] components = submitQuizPanel.questionsPanel.getComponents();
        for (int index = 0; index < components.length; ++index) {
            SubmitQuestionPanel submitQuestionPanel = (SubmitQuestionPanel) components[index];
            Util.setEnabled(submitQuestionPanel, false);

            javax.swing.ButtonModel optionButtonModel = submitQuestionPanel.optionsButtonGroup.getSelection();

            if (optionButtonModel != null) {
                AnswerEnum answer = AnswerEnum.values()[Integer.parseInt(
                        submitQuestionPanel.optionsButtonGroup.getSelection().getActionCommand())];

                QuestionModel currentQuestion = currentQuestions[index];
                AnswerEnum currentAnswer = currentAnswers[index];

                if (engine.answerController.create(submission, currentQuestion, answer) == null) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Database corrupted",
                            "Unrecoverable error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }

                java.awt.Color borderColor = answer == currentAnswer ? java.awt.Color.GREEN : java.awt.Color.RED;
                javax.swing.border.LineBorder border = new javax.swing.border.LineBorder(borderColor, 1, true);
                submitQuestionPanel.setBorder(border);
            }
        }

        // TODO
        // dialogue
        // submitQuizPanel.setVisible(false);
        // profilePanel.setVisible(true);
    }

    public void submitQuizPanelBackConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.actionConfirmPanel.setVisible(false);
        submitQuizPanel.actionSubmitPanel.setVisible(true);
    }

    public void submitQuizPanelPauseDurationCountDownActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.pauseToggleButton.setEnabled(false);
        submitQuizPanel.pauseToggleButton.setSelected(false);

        submitQuizPanelPauseToggleButtonActionPerformed(null);
    }

    public void submitQuizPanelDurationCountDownActionPerformed(java.awt.event.ActionEvent evt) {
        submitQuizPanel.backConfirmButton.setEnabled(false);

        submitQuizPanelSubmitButtonActionPerformed(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        com.formdev.flatlaf.FlatLaf flatLaf;
        // flatLaf = new com.formdev.flatlaf.FlatLightLaf();
        flatLaf = new com.formdev.flatlaf.FlatDarkLaf();
        // flatLaf = new com.formdev.flatlaf.FlatIntelliJLaf();
        // flatLaf = new com.formdev.flatlaf.FlatDarculaLaf();

        try {
            javax.swing.UIManager.setLookAndFeel(flatLaf);
        } catch (javax.swing.UnsupportedLookAndFeelException exception) {
            System.err.println(exception);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private jquiz.panels.CreateQuizPanel createQuizPanel;
    private jquiz.panels.ForgotPasswordPanel forgotPasswordPanel;
    private jquiz.panels.LoginPanel loginPanel;
    private jquiz.panels.ProfilePanel profilePanel;
    private jquiz.panels.QuizListPanel quizListPanel;
    private jquiz.panels.RegisterPanel registerPanel;
    private jquiz.panels.ResetPasswordPanel resetPasswordPanel;
    private jquiz.panels.SubmitQuizPanel submitQuizPanel;
    // End of variables declaration//GEN-END:variables
}
